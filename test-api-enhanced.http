### Enhanced AI-Powered Airbnb API Tests
### Test the full suite of AI-integrated microservices

### ==============================================
### AI AGENT SERVICE TESTS (Port 5001)
### ==============================================

### Health Check
GET http://localhost:5001/api/aiagent/health

### Process General AI Request
POST http://localhost:5001/api/aiagent/process
Content-Type: application/json

{
  "requestType": "general",
  "context": {
    "topic": "property management tips"
  },
  "userQuery": "What are the best practices for managing an Airbnb property?",
  "timestamp": "2025-06-20T10:00:00Z"
}

### Property Optimization Request
POST http://localhost:5001/api/aiagent/optimize-property
Content-Type: application/json

{
  "propertyId": "123e4567-e89b-12d3-a456-426614174000",
  "currentTitle": "Nice Apartment Downtown",
  "currentDescription": "A good place to stay in the city center",
  "currentAmenities": ["WiFi", "Kitchen"],
  "marketData": {
    "location": "Downtown",
    "averagePrice": 150,
    "occupancyRate": 0.75
  }
}

### Pricing Strategy Request
POST http://localhost:5001/api/aiagent/pricing-strategy
Content-Type: application/json

{
  "propertyId": "123e4567-e89b-12d3-a456-426614174000",
  "checkInDate": "2025-07-15T00:00:00Z",
  "checkOutDate": "2025-07-20T00:00:00Z",
  "guestCount": 2,
  "marketFactors": {
    "seasonality": "high",
    "localEvents": ["music festival"],
    "demand": "high",
    "competition": "moderate"
  }
}

### Guest Communication Request
POST http://localhost:5001/api/aiagent/guest-communication
Content-Type: application/json

{
  "bookingId": "123e4567-e89b-12d3-a456-426614174001",
  "guestMessage": "Hi, I'm arriving late tonight around 11 PM. Is that okay?",
  "communicationType": "check-in",
  "context": {
    "propertyType": "apartment",
    "checkInTime": "15:00",
    "hasKeybox": true
  }
}

### Market Analysis Request
POST http://localhost:5001/api/aiagent/market-analysis
Content-Type: application/json

{
  "location": "Downtown San Francisco",
  "startDate": "2025-07-01T00:00:00Z",
  "endDate": "2025-07-31T00:00:00Z",
  "propertyType": "Apartment",
  "filters": {
    "bedrooms": 2,
    "priceRange": [100, 300]
  }
}

### Get Recent AI Interactions
GET http://localhost:5001/api/aiagent/interactions?limit=5

### Get AI Analytics
GET http://localhost:5001/api/aiagent/analytics

### ==============================================
### PROPERTY SERVICE TESTS (Port 5002)
### ==============================================

### Get All Properties
GET http://localhost:5002/api/properties

### Get Properties with Filters
GET http://localhost:5002/api/properties?page=1&pageSize=5&status=Active&location=Downtown

### Get Property by ID
GET http://localhost:5002/api/properties/123e4567-e89b-12d3-a456-426614174000

### Create New Property
POST http://localhost:5002/api/properties
Content-Type: application/json

{
  "id": "00000000-0000-0000-0000-000000000000",
  "title": "Luxury Downtown Loft",
  "description": "Beautiful modern loft in the heart of downtown with stunning city views, high-end finishes, and premium amenities. Perfect for business travelers and urban explorers.",
  "address": "789 Metropolitan Ave, Downtown District",
  "basePrice": 200.00,
  "maxGuests": 4,
  "bedrooms": 2,
  "bathrooms": 2,
  "amenities": ["WiFi", "Kitchen", "Parking", "Air Conditioning", "Gym", "Rooftop Terrace"],
  "status": "Active",
  "createdAt": "2025-06-20T10:00:00Z",
  "updatedAt": "2025-06-20T10:00:00Z"
}

### Update Property
# Use an actual property ID from a previous create request
PUT http://localhost:5002/api/properties/123e4567-e89b-12d3-a456-426614174000
Content-Type: application/json

{
  "id": "123e4567-e89b-12d3-a456-426614174000",
  "title": "Updated Luxury Downtown Loft",
  "description": "Newly renovated modern loft with smart home features",
  "address": "789 Metropolitan Ave, Downtown District",
  "basePrice": 225.00,
  "maxGuests": 4,
  "bedrooms": 2,
  "bathrooms": 2,
  "amenities": ["WiFi", "Kitchen", "Parking", "Air Conditioning", "Gym", "Rooftop Terrace", "Smart Home"],
  "status": "Active",
  "createdAt": "2025-06-20T10:00:00Z",
  "updatedAt": "2025-06-20T10:00:00Z"
}

### Get Property Analytics
GET http://localhost:5002/api/properties/123e4567-e89b-12d3-a456-426614174000/analytics

### Optimize Property (calls AI Agent service)
POST http://localhost:5002/api/properties/123e4567-e89b-12d3-a456-426614174000/optimize

### Property Service Health Check
GET http://localhost:5002/api/properties/health

### ==============================================
### PRICING SERVICE TESTS (Port 5003)
### ==============================================

### Get Pricing Recommendation
POST http://localhost:5003/api/pricing/calculate
Content-Type: application/json

{
  "propertyId": "123e4567-e89b-12d3-a456-426614174000",
  "checkInDate": "2025-07-15T00:00:00Z",
  "checkOutDate": "2025-07-20T00:00:00Z",
  "guestCount": 2,
  "marketFactors": {
    "seasonality": "high",
    "localEvents": ["conference", "music festival"],
    "weatherForecast": "sunny",
    "bookingLeadTime": 30
  }
}

### Pricing Service Health Check
GET http://localhost:5003/api/pricing/health

### ==============================================
### GATEWAY SERVICE TESTS (Port 5000)
### ==============================================

### Gateway Health Check
GET http://localhost:5000/api/gateway/health

### Gateway Status
GET http://localhost:5000/api/gateway/status

### Test Service Communication through Gateway
GET http://localhost:5000/api/gateway/services

### ==============================================
### INTEGRATION WORKFLOW TESTS
### ==============================================

### Complete Property Management Workflow
# Step 1: Create a new property
POST http://localhost:5002/api/properties
Content-Type: application/json

{
  "id": "00000000-0000-0000-0000-000000000000",
  "title": "Cozy Beach House",
  "description": "Charming beach house with ocean views",
  "address": "456 Ocean Drive, Beach City",
  "basePrice": 180.00,
  "maxGuests": 6,
  "bedrooms": 3,
  "bathrooms": 2,
  "amenities": ["WiFi", "Kitchen", "Parking", "Beach Access", "BBQ Grill"],
  "status": "Active",
  "createdAt": "2025-06-20T10:00:00Z",
  "updatedAt": "2025-06-20T10:00:00Z"
}

### Step 2: Optimize the property using AI
# Replace {{propertyId}} with actual ID from step 1
POST http://localhost:5001/api/aiagent/optimize-property
Content-Type: application/json

{
  "propertyId": "{{propertyId}}",
  "currentTitle": "Cozy Beach House",
  "currentDescription": "Charming beach house with ocean views",
  "currentAmenities": ["WiFi", "Kitchen", "Parking", "Beach Access", "BBQ Grill"],
  "marketData": {
    "location": "Beach City",
    "averagePrice": 160,
    "occupancyRate": 0.85,
    "seasonality": "high"
  }
}

### Step 3: Get AI-powered pricing strategy
POST http://localhost:5001/api/aiagent/pricing-strategy
Content-Type: application/json

{
  "propertyId": "{{propertyId}}",
  "checkInDate": "2025-08-01T00:00:00Z",
  "checkOutDate": "2025-08-07T00:00:00Z",
  "guestCount": 4,
  "marketFactors": {
    "seasonality": "peak",
    "localEvents": ["summer festival", "beach volleyball tournament"],
    "demand": "very_high",
    "competition": "high"
  }
}

### Step 4: Simulate guest communication
POST http://localhost:5001/api/aiagent/guest-communication
Content-Type: application/json

{
  "bookingId": "{{bookingId}}",
  "guestMessage": "We're planning to have a small family gathering. Can we use the BBQ grill?",
  "communicationType": "amenity_inquiry",
  "context": {
    "propertyType": "house",
    "amenities": ["BBQ Grill", "Beach Access"],
    "guestCount": 4,
    "duration": 7
  }
}

### Step 5: Analyze market conditions
POST http://localhost:5001/api/aiagent/market-analysis
Content-Type: application/json

{
  "location": "Beach City",
  "startDate": "2025-08-01T00:00:00Z",
  "endDate": "2025-08-31T00:00:00Z",
  "propertyType": "House",
  "filters": {
    "beachAccess": true,
    "maxGuests": 6
  }
}

### ==============================================
### PERFORMANCE AND LOAD TESTS
### ==============================================

### Concurrent Property Creation Test
# Run this multiple times to test concurrent operations
POST http://localhost:5002/api/properties
Content-Type: application/json

{
  "id": "00000000-0000-0000-0000-000000000000",
  "title": "Load Test Property {{$randomInt}}",
  "description": "Auto-generated test property for performance testing",
  "address": "{{$randomInt}} Test Avenue, Test City",
  "basePrice": {{$randomInt 100 400}},
  "maxGuests": {{$randomInt 2 8}},
  "bedrooms": {{$randomInt 1 4}},
  "bathrooms": {{$randomInt 1 3}},
  "amenities": ["WiFi", "Kitchen", "Parking"],
  "status": "Active",
  "createdAt": "2025-06-20T10:00:00Z",
  "updatedAt": "2025-06-20T10:00:00Z"
}

### Bulk AI Processing Test
POST http://localhost:5001/api/aiagent/process
Content-Type: application/json

{
  "requestType": "general",
  "context": {
    "bulkTest": true,
    "iteration": "{{$randomInt}}"
  },
  "userQuery": "Generate a quick property management tip for iteration {{$randomInt}}",
  "timestamp": "2025-06-20T10:00:00Z"
}

### ==============================================
### ERROR HANDLING TESTS
### ==============================================

### Test Invalid Property ID
GET http://localhost:5002/api/properties/invalid-id

### Test Missing Required Fields
POST http://localhost:5002/api/properties
Content-Type: application/json

{
  "title": "Incomplete Property"
}

### Test Invalid AI Request
POST http://localhost:5001/api/aiagent/process
Content-Type: application/json

{
  "requestType": "invalid_type",
  "context": {},
  "userQuery": "",
  "timestamp": "invalid-date"
}

### ==============================================
### CLEANUP TESTS
### ==============================================

### Delete Test Property (use actual ID)
# DELETE http://localhost:5002/api/properties/{{propertyId}}

### Note: 
### - Replace {{propertyId}} and {{bookingId}} with actual IDs from previous requests
### - Make sure all services are running on their respective ports
### - Some tests require OpenAI API key configuration
### - Database will be created automatically on first run
